{"version":3,"sources":["components/logo/logo.styles.jsx","components/logo/logo.component.jsx","components/previewText/previewText.styles.jsx","components/previewText/previewText.component.jsx","components/icons/icons.styles.jsx","components/icons/icons.component.jsx","components/container/container.styles.jsx","components/container/container.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Image","styled","img","Logo","src","PrevieTexContainer","div","Span","p","PreviewText","IconsContainer","Icons","className","icon","faComment","faRetweet","faHeart","faEnvelope","same","css","Wrapper","TopWrapper","Name","Uname","Date","Text","ContainsImage","Container","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2eAEO,IAAMA,EAAQC,IAAOC,IAAV,KCKHC,EAJF,kBACL,kBAACH,EAAD,CAAOI,IAAI,8E,+ZCFZ,IAAMC,EAAqBJ,IAAOK,IAAV,KAclBC,EAAON,IAAOO,EAAV,KCHFC,EAVK,kBAChB,kBAACJ,EAAD,KACI,4DACA,2HACA,kBAACE,EAAD,kB,wMCLD,IAAMG,EAAiBT,IAAOK,IAAV,KCcZK,EATD,kBACV,kBAACD,EAAD,KACA,kBAAC,IAAD,CAAiBE,UAAU,IAAIC,KAAMC,MADrC,KAEA,kBAAC,IAAD,CAAiBF,UAAU,IAAIC,KAAME,MAFrC,KAGA,kBAAC,IAAD,CAAiBH,UAAU,IAAIC,KAAMG,MAHrC,IAIA,kBAAC,IAAD,CAAiBJ,UAAU,IAAIC,KAAMI,Q,6pCCVzC,IAAMC,EAAOC,YAAH,KAQGC,EAAUnB,IAAOK,IAAV,KAOPe,EAAapB,IAAOK,IAAV,KAMVgB,EAAOrB,IAAOO,EAAV,IAEXU,GAIOK,EAAQtB,IAAOO,EAAV,IAEZU,GAEOM,EAAOvB,IAAOO,EAAV,IAEXU,GAGOO,EAAOxB,IAAOO,EAAV,IAEXU,GAIOQ,EAAgBzB,IAAOK,IAAV,KCXXqB,EAxBG,kBACd,kBAACP,EAAD,KACI,kBAAC,EAAD,MACI,kBAACC,EAAD,KACI,kBAACC,EAAD,0BACA,kBAACC,EAAD,yBACA,kBAAC,EAAD,iBAEA,kBAACE,EAAD,qCACC,yBAEL,kBAACC,EAAD,KACI,yBAAKtB,IAAI,4DACT,kBAAC,EAAD,OAEJ,kBAAC,EAAD,QCXGwB,MARf,WACE,OACE,yBAAKhB,UAAU,OACd,kBAAC,EAAD,QCIeiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d79ecf6a.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const Image = styled.img `\r\n    display: flex;\r\n    float: left;\r\n    margin: 5px;\r\n    border: 1px solid #CBCBCB;\r\n    border-radius: 25px;\r\n    height: 50px;\r\n    width: 50px;\r\n` ","import React from 'react'\r\nimport { Image } from './logo.styles'\r\n\r\nconst Logo = () => (\r\n        <Image src=\"https://image.freepik.com/free-vector/letter-s-logo-vector_23987-138.jpg\" />\r\n)\r\n\r\nexport default Logo;","import styled from 'styled-components'\r\n\r\nexport const PrevieTexContainer = styled.div `\r\n    h2{\r\n        padding-left: 8px;\r\n        text-align: left;\r\n        font-size: 15px;\r\n        margin: 5px;\r\n    }\r\n    p{\r\n        padding-left: 8px;\r\n        text-align: left;\r\n        margin: 5px;\r\n    }\r\n`\r\n\r\nexport const Span = styled.p `\r\n    text-align: left;\r\n    color: #CBCBCB;\r\n    margin: 5px;\r\n`","import React from 'react'\r\nimport {  PrevieTexContainer, Span} from \"./previewText.styles\";\r\n\r\nconst PreviewText = () => (\r\n    <PrevieTexContainer>\r\n        <h2>Learning React? Start Small.</h2>\r\n        <p>Can't pry yourself away from the tutorials? The cure is to make tiny little experiment apps.</p>\r\n        <Span>skr.xyz</Span>\r\n    </PrevieTexContainer>\r\n\r\n) \r\n\r\n\r\nexport default PreviewText;","import styled from 'styled-components';\r\n\r\nexport const IconsContainer = styled.div`\r\ndisplay: flex;\r\nfloat: left;\r\npadding-top: 15px;\r\nmargin-left: 50px;\r\n    .i{\r\n        padding-left: 30px;\r\n    }\r\n`","import React from 'react'\r\nimport { faComment,faRetweet, faHeart, faEnvelope} from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\n\r\nimport {IconsContainer } from './icons.styles';\r\n\r\nconst Icons = () => (\r\n    <IconsContainer>\r\n    <FontAwesomeIcon className=\"i\" icon={faComment} /> 2\r\n    <FontAwesomeIcon className=\"i\" icon={faRetweet} />54\r\n    <FontAwesomeIcon className=\"i\" icon={faHeart} />6\r\n    <FontAwesomeIcon className=\"i\" icon={faEnvelope} />\r\n    </IconsContainer>\r\n)\r\n\r\nexport default Icons;","import styled,{css} from 'styled-components';\r\n\r\nconst same = css `\r\n    text-align: left;\r\n    margin-left: 10px;\r\n    font-size: 15px;\r\n    margin-bottom: 5px;\r\n    margin-top: 5px;\r\n`\r\n\r\nexport const Wrapper = styled.div `\r\n    display: inline-block;\r\n    width: 650px;\r\n    padding: 10px;\r\n    border-top: 1px solid grey;\r\n    border-bottom: 1px solid grey;\r\n`\r\nexport const TopWrapper = styled.div `\r\n    display: flex;\r\n    float: left;\r\n    padding: 0;\r\n`\r\n\r\nexport const Name = styled.p `\r\n    font-weight: bold;\r\n    ${same}\r\n    padding-bottom: 8px;\r\n`\r\n\r\nexport const Uname = styled.p `\r\n    font-weight: lighter;\r\n    ${same}\r\n`\r\nexport const Date = styled.p `\r\n    font-weight: lighter;\r\n    ${same}\r\n`\r\n\r\nexport const Text = styled.p `\r\n    float: left;\r\n    ${same}\r\n\r\n`\r\n\r\nexport const ContainsImage = styled.div `\r\n    width:500px;\r\n    display: inline-block;\r\n    border: 1px solid #CBCBCB;\r\n    img {\r\n        width: 500px;\r\n        height: 300px;\r\n    }\r\n \r\n`\r\n","import React from 'react'\r\n\r\nimport Logo from '../logo/logo.component';\r\nimport PreviewText from '../previewText/previewText.component'\r\nimport Icons from '../icons/icons.component'\r\n\r\nimport { Name, Uname, Date, Text, ContainsImage, Wrapper,TopWrapper} from './container.styles';\r\n\r\n\r\nconst Container = () =>(\r\n    <Wrapper>\r\n        <Logo/>\r\n            <TopWrapper>\r\n                <Name>The Practical Dev</Name>\r\n                <Uname>@ThePracticalDev</Uname>\r\n                <Date>Sept 10</Date>\r\n            </TopWrapper>\r\n                <Text>Learning React ? Start Small.\r\n                {\"{ author: @skrawani }\"}</Text>\r\n            \r\n            <ContainsImage>\r\n                <img src=\"https://miro.medium.com/max/3200/0*z0WlyaPfVlWpCAS2.png\" />\r\n                <PreviewText/>\r\n            </ContainsImage>\r\n            <Icons/>\r\n\r\n            \r\n            \r\n        \r\n    </Wrapper>\r\n    \r\n);\r\n\r\nexport default Container;","import React from 'react';\nimport './App.css';\n\nimport Container from './components/container/container.component';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Container/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}